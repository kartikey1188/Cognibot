[Music] in the previous video we looked at how we can identify requirements using several techniques such as interviews looking at the documentation questionnaires and so on you might have noticed that not all requirements have the same characteristic or similar type of characteristics for example consider these two requirements a seller can add or delete items from their catalog this is one requirement a second one is when a new product is added to the catalog it must show up on the users interface within five seconds can you say what is the difference between these two requirements what is the nature of these two requirements how was that different pause here for a moment think about it and then proceed so let's look at the first requirement so requirement one captures a functionality required by the users from the system so the user performs some actions gives some inputs and based on that input the system provides an appropriate output so here you can see that the user can maybe add edit or delete some things from their catalog and the output will be a result of these actions so these type of requirements are known as functional requirements so functional requirements can be considered similar to a mathematical function where the function transforms an element in the input domain i to a value in the output o so the functional requirements of the system should clearly describe each functionality that the system would support along with the corresponding input and the output data set so coming back to the requirements we saw that requirement one of being able to add or delete a product from the catalog is a functional requirement the requirement second requirement that we talked about that is that the product should appear in the catalog within 5 seconds it is not a requirement that can be expressed as functions that is as accepting some input and producing some output data so such requirements essentially specify how the system should behave not what the system should do so such requirements are called non-functional requirements it is a little difficult to understand both these terms in the beginning especially because we are used to the word non-functional interpreting the word non-functional in a different way so again let us take the example of the seller portal we have talked about one non-functional requirement which was that the product update should appear within five seconds what are some other non-functional requirements that you can think of for the system pause here write down one or two non-functional requirements and proceed okay one type of non-functional requirement is reliability so a client would want the system to be reliable so reliability is the extent to which a program behaves the same way over time in the same operating environment so in the case of software we need to ensure that the software doesn't crash often otherwise users will get frustrated for example in the seller portal reliability is even more important we must ensure that the portal handles all operations especially when the inventory changes based on the buying and selling from customers now in addition to reliability we also want the system to be able to handle unexpected situations what does it mean for example a user may just give some garbage as input what is the system do now so such features or non-functional requirements come under the category called robustness so robustness is the extent to which a program can recover from errors and unexpected input for example in the seller portal we have to ensure that the service handles large numbers and high traffic when we specify requirements related to reliability and robustness we are in a way ensuring that the system behaves the way we intend it to behave and we are not exactly specifying what we want the system to do or we are not checking the functional requirements so that is the key between functional and non-functional requirements so to summarize in this video we looked at functional and non-functional requirements we saw that functional requirements describe what the system should do whereas we saw that non-functional requirements like reliability robustness they essentially specify how the system should behave so in addition to reliability and robustness there are other non-functional requirements as well such as performance portability security interoperability etc so we won't look into those in detail now but it is important to consider the functional as well as non-functional requirements when we start building a software system you