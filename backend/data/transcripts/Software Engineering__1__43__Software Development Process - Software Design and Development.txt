[Music] in the previous video we talked about the first steps of software development cycle namely gathering of requirements so what is the next step most people would think ok i am ready to start coding and they would jump to writing code is that really the next step let's see this with an example imagine that you are a small team going to implement the amazon pay feature from the requirements all of you are really excited to start implementing right and directly jump into coding what difficulties are you likely to encounter pause here for a moment and think about it and write down one or two difficulties that may arise if we directly jump into coding after gathering the requirements so one issue can be that different developers they have different ideas about how the functionality should be implemented so even if you have discussed about what should be done with your teammates you will most likely make changes in your code for example you might add an argument to an existing function in your code and this can result in an error in the code of your colleague which uses your function to develop her component and this can be more pro problematic when different components created by different people have to interact with each other and such a scenario can be a disaster it will needlessly make the software complicated and the product won't be delivered on time also if i want to add new features later on it would help to have a big picture view of the system so that i can decide how this new feature can be correctly integrated into the existing system so this big picture view of the system is created in the design phase of the development cycle ok we create this so that we know how to organize the code before we jump into implementing it and this provides the structure to the whole software system so after coming up with the design then we can go into implementing the system and write code so learners here is a reflection spot for you so what all comes to your mind when you see software developers writing code how do you think people work in this development phase you can pause this video and write down your responses before proceeding so when a feature is being implemented multiple developers work together and write code for the feature they use tools like github to collaborate and write code and very often coding is done in a distributed manner with developers working in different locations and even in different time zones hence it is very important that everyone working on the code base has a consistent understanding about what the code does and that's the reason why developers write documentation for their code and write precise interface definitions so now what is an interface an interface is a description of the actions that your functions can do without describing the implementation in detail the interface shows what requests are accepted and in what format the corresponding response is given that is the output the code being implemented by the interface can change as long as the interface remains the same so in the development phase software developers write code based on the requirements and the design of the software system development is usually distributed these systems are too big for one person or one small team to develop so multiple people write the code which implement the required functionalities often multiple people are sitting in multiple time zones to do this so to ensure now that we can put everything together and it functions everyone in the development team needs to write what are called interface definitions what does that mean it basically means that what is the language that two components can talk how do i expect a query what is the form that i expect the query to take and what is the form in which i will provide the answer so that is the simple way of thinking about interface definitions