[Music] in the previous videos we looked at the requirement phase in the plan and document perspective how a software team can gather and analyze requirements and how they can organize this information in a document known as the srs or the software requirements specification document we saw that the srs document serves as an agreement between the customers and developers however in many projects customers themselves are unsure of the requirements and their understanding of their needs evolve and can change over time so how can we address this issue the agile perspective can address some of these problems so in week one we saw that the agile process involves working closely and interacting frequently with stakeholders to develop and refine requirements it also involves building a working prototype and refining it by adding new features in sprints or iterations and these iterations run typically every two weeks so in the agile perspective we are basically in the maintenance mode as soon as we come up with some requirements and then we start implementing features which match these requirements so this agile life cycle begins with what is known as behavior driven design so let us look at what behavior driven design is behavior-driven design or bdd it asks questions about the behavior of an application before as well as during development so that stakeholders are less likely to miscommunicate so even in this case requirements are written down but these requirements are continuously refined to meet the stakeholders requirements and expectations the bdd version of requirements are known as user stories and user stories take the place of what srs was in the plan and document perspective now let's look at what user stories are so user stories are short informal plain language description of what a user wants to do within a software product which is beneficial and of value for them so user stories come from the human computer interaction community or the hci community and these user stories are developed in three inch by five inch or three by five index cards so we write these user stories in small cards and user stories are the smallest unit of work which can be done in one sprint and one sprint is roughly one to two weeks and user stories follow a particular pattern or template which is known as the role feature benefit pattern which states that as a particular type of user i want a particular action so that this that provides a particular value or benefit to the use so let's look at some examples so let's take the example from the seller portal problem that we discussed in the previous lectures here is a requirement that we gathered from several stakeholders about viewing an inventory so user story for this is shown here so the feature is view inventory so as an independent seller which is a type of user i want to view my inventory which is an action so that i receive a particular benefit that is i can take stock of the products which are low in number let's take another example of tracking customer feedback so what will a user story for this look like so here again we follow the same pattern as an independent seller which is the type of user i want to view my customers feedback for each product and so that i can get a sense of the pertinent issues in my products so this is the value which we are providing to the user so what are some benefits of these user stories one we saw that they are lightweight versions of the requirements as opposed to the srs documentation which we saw earlier second user stories help stakeholders plan and prioritize development so for example if i want a feature which has to be implemented first maybe for to get immediate feedback or to get a feel of the system i can prioritize the development of the user story corresponding to that feature so for example we have two features of viewing inventory and tracking customer feedback in this case the client might want to implement the catalog and the inventory first so the development team can tell the customers that we will provide the view inventory feature in two weeks so if you have noticed we have not told the customers how we will implement these features so by concentrating on the behavior versus the implementation of the application it is easier to reduce misunderstanding between stakeholders another benefit is that it facilitates conversations between the users and the development team so more than creating user stories it is this conversation this back and forth between the different perspectives of each participant that will bring better simpler and more valuable solutions to users problems for example let's take this feature of tracking customer feedback so when we show this to a client the customer or the client will realize that maybe i would also like to be notified by email about the products which have low ratings of one or two stars and such modifications are common in the agile perspective and user stories can facilitate such modifications so what are some guidelines to create good user stories the acronym smart can help us come up with good user stories smart user stories are specific they are measurable achievable relevant and time boxed so let us look at each of these in detail first user story should be specimen specific so specific user stories are essential so that we know exactly what to implement so let's consider this user story which states that users can search for a product in the catalog so this is a bit way because we have not exactly specified for example what type of product it is or based on what attribute can be searched for a product a more specific user story can be that the user can search for a product by title in the catalog next user story should be measurable so each story should be testable which implies that there are non-expected results for some good inputs so let's take this feature the seller portal should have good response time so what do we mean by good this is vague and it is not easily measurable a more measurable user story can be so when adding a product to the catalog the product should appear in the catalog within three seconds and this is measurable and this is testable so make sure that your user stories are measurable next user story should be achievable ideally we should be able to implement a user story in one agile iteration that is in one to two weeks and if you are not able to complete one story per iteration then they are too big and you need to subdivide these stories into smaller ones so for example view inventory might not be able we might not be able to implement this in one week or in one iteration hence we can divide it into two or three features where feature 1a is we implement the feature of viewing all products in the inventory in a single page and then we add pagination and maybe filters can be the next feature so in this way we make sure that one user story is completed in one agile iteration next user story should be relevant so user story must have some business value to one or more stakeholders so how can we be sure that a user story is relevant we should ask questions we should ask questions like why is this feature needed is it really important is it adding any value so what if this feature is added so these questions can help us and ensure that the user stories which we add are relevant next user story should be time boxed so time box still means that we should stop implementing a feature once we have exceeded the time budget so what should we do if we have exceeded the time budget one is we either give up or as we saw earlier we divide the story into smaller ones and or we reschedule what is left according to a new estimate we revise our estimates so it is important to make sure that you are on schedule so we have seen the benefits of user stories but let's reflect on this question for a moment on what are certain drawbacks of user stories are they always good can they not be used in certain situations please pause this video and write down your responses before proceeding so what are certain drawbacks of user stories one it may be difficult or too expensive to have continuous contact with customers throughout the development process because customers may not want to participate or they may not be available at all times second this approach may also not scale to very large software development projects or even safety critical applications because in such projects extensive planning and documentation is required before the actual implementation and especially for safety critical applications there is no room for errors or refinement so the key point to remember is that software development methodologies depend on the type of application you are building so in this lecture we looked at behavior driven development of bdd so bdd asks questions about the behavior of an application before and during development so that the stakeholders are less likely to miscommunicate we saw that the bdd version of requirements is user stories we saw the role feature benefit pattern or template we looked at the characteristics of good user stories that is smart user stories that it should be specific measurable achievable relevant and time boxed and we also looked at the benefits and drawbacks of user stories