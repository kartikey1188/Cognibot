[Music] so in the previous lecture we looked at how we can gather and analyze requirements and we categorize these requirements into two broad categories of functional and non-functional requirements now another important point to consider is how we organize all these requirements that we have gathered and analyzed so in this and the upcoming lectures we will look at means by which we can effectively organize these requirements in the first week we looked at two prominent software process models the plan and the document model and the agile model and recall that in the plan and document model significant time is spent in planning and documenting the entire software process and in the plan and document perspective requirement gathering and analysis is usually done by a person known as a system analyst in consultation with other members of the software team and after the analyst has gathered all the required information regarding the software to be developed he or she starts to organize these requirements in what is known as a software requirements specification or an srs document and this document contains all the user requirements in a structured form so now let us look at the standard format of an srs document so this is the standard structure of an srs document so it has a table of contents which has several sections and subsections now let us look at some of the important sections in the srs document now section 1 and 2 it describes the broad outline and description of the software system which we want to build for example it contains the purpose the scope several definitions acronyms and abbreviations which will be used in the software as well as the perspective functions constraints assumptions dependencies and so on now section 3 of the srs document contains the specific functional as well as non-functional requirements of the system now let us look at section 3.1 section 3.1 refers to the external interface requirements and here we specify things like what are the user interfaces for example what are the sample screen images gui standards screen layout etc then we have hardware interfaces that is the interface between the hardware and the software such as the description of supported device types the nature of data and control interactions between the software and the hardware for example in an atm system we need to specify the interface between the atm hardware the atm card and the atm software next is descriptions about the software interface which is the connection between this software and other software components for example the database what is the operating system what are other tools and libraries which will be used and so on so for example in the amazon seller portal example which we described in the previous lectures so the seller portal has to interface with the amazon buying portal database so this is an important software interface which we have to specify then we have communication interfaces which are any communication which is required by the software example sending an email or sms notification about orders in the seller portal so that requires us to interface with an email server and such communication interfaces have to be specified now when we look at section 3.2 it outlines a broad high level function which is known as a system feature and the corresponding functional requirements for each of these system features so for example taking the example of the amazon seller portal we identified several key requirements such as managing the catalog the inventory tracking orders payments inventory and all of those things so all of this forms specific system features which can be listed in the system features section and for each of these system features we add additional functional requirements and finally section 3.3 to 3.6 contains details of non-functional requirements like performance security etc so one thing to remember is that this is a guideline of how an srs should be organized and it is generally not very rigid based on the organization and the context you are in modifications to the structure and the content are possible so now that we have seen what an srs document contains let's reflect on why maintaining such an srs document is important so what do you think are some advantages of maintaining such an srs document please pause this video and write down your responses before proceeding okay so let's look at some advantages of using an srs first it helps to form an agreement between the customers and developers so after the srs is prepared the srs document is also given to customers the customers read it and after several iterations finally the srs document is accepted so this helps the customers to form an expectation of what they will get from the developers and for the developers about what the customer expects from the software second it helps to reduce future reworks an srs forces stakeholders to rigorously think about all the requirements before the start of the design and development and this helps to reduce changes in later stages third an srs provides a basis for estimating costs and schedules so in subsequent weeks we will look at important tasks in managing a software project so estimating cost and schedule is an important software management task and an srs helps in estimating the size of the software which is nothing but a function of all the requirements of the system and based on this estimation other estimations such as effort required and cost are estimated and based on these estimates the project manager can also create a schedule for the development of the software and finally an srs can facilitate future extensions and it can serve as a basis for planning future enhancements of the software system so in this lecture we looked at what a software requirement specification document is we looked at different parts and benefits of the nsrs however there is a drawback of srs which is a lot of documentation is required and this is okay if the requirements are fixed in the next lecture we will look at the agile perspective which is the behavior driven design which can help in addressing this drawback of srs in the plan and document perspective you