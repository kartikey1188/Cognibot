[Music] in the previous videos we looked at the software development lifecycle particularly the waterfall model and its extensions and these models are known as the plan and document process models wherein you come up with a plan for the project which includes extensive and detailed documentation of all the phases of that plan and progress of software development is measured against this plan we saw different models like the waterfall model the prototype model the spiral model etc and although these plan and document processes they brought discipline to software development they were not very effective in terms of on-time delivery and being within the specified budget so let's look at some examples so the set of images on the screen it shows the status of software projects across different years from 1995 to 2013. and what these series of studies show is that 80 to 90 percent of all software projects are either late or over budget or simply just abandoned and this is a shocking number right so on the other hand it's just 10 to 15 percent of software projects which are on time and on budget so this was considered a severe drawback of the plan and document perspective so to address these problems or these difficulties around 20 years ago in february 2001 a group of software developers they met to develop a lighter weight software development lifecycle and this came to be known as the agile manifesto so this manifesto the agile manifesto is built on four key principles one it emphasizes individuals and interactions over processes and tools so although processes and tools are important it emphasizes interactions between individuals in the development team as well as with the clients second rather than focusing a lot on comprehensive and extensive documentation the emphasis is on delivering working software and this is delivered in increments and the agile manifesto emphasizes a lot on collaboration with the customer to actually understand the exact needs of the customer rather than negotiating over contract details and finally instead of following a strict and rigorous plan agile emphasizes on responding to change whenever it is required and what the manifesto states is that although the items on the right are valuable the items on the left are more valuable in the agile development process this agile process is being widely used today and in this approach software projects are built using multiple iterations and thus it is known as an iterative software development model or incremental software development where the teams work together to deliver the product in small increments so instead of waiting till the end to deliver the entire product teams they develop prototypes of key features and quickly release the prototype for feedback for example in the first iteration the development team might build features for key requirements they then show it to the client and get their feedback so even if the client wants changes the team can quickly refine it in the next iteration okay so let us look at some agile approaches so one of the earliest agile approaches is extreme programming or xp and it has several key practices like behavior driven design test driven development pair programming etc we will look at some of these in detail in the upcoming weeks another approach is known as scrum in which the product is built in the series of iterations known as prints which are roughly one to two weeks long and if this helps break down a big complex project into several small bite-size pieces another approach is known as kanban where the software to be built is again divided into small work items and these are represented on a kanban board allowing team members to see the state of every piece of work at any given time so in this course we will be following several practices from extreme programming and scrum such as behavior driven design test driven development sprints and all for our group projects so the important thing to note here is that rather than just following these approaches and practices the agile development is more of adhering to the broad philosophy and the principles outlined by the agile process so when you approach software development in this manner it is generally good to live by these values and principles and use them to help figure out the right things to do given your particular context so now that we have seen these two broad perspectives the plan and document perspective and the agile perspective let's reflect on this question when should we use the plan and document perspective and when should we use the agile perspective so let's say we want to build a software product which process should i use what are certain factors or characteristics which will help you determine which model to use so please pause this video and think about your responses before proceeding so which process model to use depends on several factors and this set of questions can help us get a better idea of which model to use so a no answer to most of these questions suggests agile whereas if it's a yes to most of these questions then a plan and document perspective might be better so let's look at these questions so firstly if the requirements are the specifications if they are required to be fixed up front at the start of the project then a plan and document perspective might be better and it also depends on the clients or the customers if they are unavailable for most of the time then maybe a plan and document perspective might be better and a decision also depends on the characteristics of the system to be built right so if the system to be built is large if it is very complex so for example you have to build software for maybe an air missile system or a nuclear power plant right there is no margin for error and hence extensive planning and documentation is a necessity in such cases so it might be better to go for a plan and document process characteristics is about the team your software uh team so if they are geographically distributed uh if the team already is familiar with the document or documentation model then it might be better to use a plan and document process and finally is the system which we have to build is it subject to several regulations for example if you want to build a banking software you need approvals from banks from the government etc hence upfront planning and documentation is necessary so the key thing to remember here is that the type of approach you follow it depends on a lot of factors right it depends on the clients the characteristics of the system and the team so once you start working in a software company different teams and different organizations will use different processes based on the characteristics of the client the system to be built as well as the team