[Music] in the previous video we talked about the design and the development phases of software development that mean that we are now ready to release our software no there are two more phases that we have to think about one of them is testing and the other one is maintenance so here is the question for you why is testing so important what will happen if we do not do rigorous testing of our software before we release it so after the software system is built it's necessary that the software should behave according to the requirements and at this stage testing of the system is done and testing is important because many bugs and defects can still exist in the system and these bugs can result in a loss of lot of money so for example a study have shown that in 2002 software bugs caused the u.s economy around 60 billion in losses and in 2016 this number jumped to 1.1 trillion and the failure to address bugs can even cause severe catastrophes and you can find more details about these in the additional resources which we have provided so how is testing done so testing is done at different granularities so one type of testing is known as unit testing so unit tests they focus on a single part of the whole application in total isolation usually it's a single class or a single function which is tested integration testing is another type of testing in which after now you have tested the individual parts you now test how parts of the application work together as a whole and finally you have acceptance testing where you check whether the requirements of the users are actually met by testing the application with end users and there are two types of acceptance testing alpha testing and beta testing so alpha testing is done by internal employees in a lab or a staging environment and the goal of the alpha test is to catch as many issues as possible before the product has been released to the public and then there is beta testing beta tests are conducted by actual users in a real-life setting and after adequate testing the feature is rolled out but it is necessary to monitor how users are actually using that feature are they using it the way we intend or is something else happening we have to see if there are any difficulties or errors that they encounter all of this is done during the maintenance phase okay so the purpose of maintenance can be one to monitor what the users are doing and how they are using the software two to change the code for upgrades now we are all familiar with this push of a patch release right so that is the maintenance phase of any software and the third important thing is when we want to add features so we are all familiar with several software where features have been added as we kept using them let us see this with an example so let us think about our amazon pay example so even after releasing this feature what difficulties or errors do you think users will face there can be issues like for example some conditions might have been missed resulting in failures or maybe a simple ui issue in a very specific browser so the team identifies such issues in the maintenance phase and continues this process to fix such issues so in the previous videos we looked at different phases in the software development life cycle we looked at how we should gather requirements then how we should come up with the design the development phase the testing and the maintenance phase so in each of the following weeks in this course we will look at each of these stages in detail we will look at the tools the best practices in each of these stages for example what are the tools used to gather requirements what are the practices for designing software in the development process and so on